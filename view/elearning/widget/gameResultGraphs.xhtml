<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:s="http://jboss.com/products/seam/taglib"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:rich="http://richfaces.org/rich"
	xmlns:a4j="http://richfaces.org/a4j">

	<script type="text/javascript">
 	processingInstances = new Array();
 	numberOfRounds = "#{gameSession.getGameRounds().size()}";
 	numberOfRounds = parseInt(numberOfRounds);
 	console.log("number of rounds: " +numberOfRounds);
  	userTags = new Array(numberOfRounds);
	scores = new Array(numberOfRounds);	
	foreignTags = new Array(numberOfRounds);
	foreignAppearences = new Array(numberOfRounds);	
	userTagAppearences = new Array(numberOfRounds);
	foreignMatchTypes = new Array(numberOfRounds);
	
	for (var i = 0; i &lt; numberOfRounds; i++){
		console.log("creating arrays");
		userTags[i] = new Array();
		scores[i] = new Array();
		foreignTags[i] = new Array();
		foreignAppearences[i] = new Array();
		userTagAppearences[i] = new Array();
		foreignMatchTypes[i] = new Array();
	}

	terms = new Array();
	
	function newUserTag(round, tag,score, appearence){
		tag = tag.trim();
		tag = tag.replace(/ +(?= )/g,''); //replace multiple whitespaces 
		tag = tag.replace(/ /g,"\n"); //replace whitespaces with linebreak
		console.log("new user tag. round: " + round + ", tag: " + tag + ", score: " + score);
		userTags[round - 1].push(tag);
		scores[round - 1].push(score);
		userTagAppearences[round - 1].push(parseInt(appearence))
	}

	function newProcessingInstance(id){
		var waiting = setInterval(function(){
			var pjs = Processing.getInstanceById(id);
			if(typeof pjs != 'undefined'){
				clearInterval(waiting);
				//add Instance
				processingInstances.push(pjs);
				console.log("number of processing instances: " + processingInstances.length);
				if(processingInstances.length == numberOfRounds)
					setUpGraphs();
			}			
		},10)
	}
	
	function newTerm(term){
		console.log("new term: " + term);
		terms.push(term);
	}

	function newForeignTag(round, tag, appearence, matchtype){
		tag = tag.trim();
		tag = tag.replace(/ +(?= )/g,''); //replace multiple whitespaces 
		tag = tag.replace(/ /g,"\n"); //replace whitespaces with linebreak
		foreignTags[round - 1].push(tag);
		foreignAppearences[round - 1].push(appearence);
		foreignMatchTypes[round -1].push(matchtype);
	}
	
	function setUpGraphs(){
		console.log("setUpGraphs called");
		for(var i = 0; i &lt; numberOfRounds; i++){
			var pjs = processingInstances[i];
			term = terms[i];
			console.log("term in round " + i + " : " + term  );
			
			pjs.setTerm(term);
			for(var j = 0; j &lt; userTags[i].length; j++){
				var type = score2matchType(scores[i][j]);
				pjs.addOwnTag(userTags[i][j], 100, getScale(i, userTagAppearences[i][j]), type);
			}

			for(var j = 0; j &lt; foreignTags[i].length; j++){
				var ft = foreignTags[i][j];
				if(! containsIgnoreCase(userTags[i], ft))
					pjs.addForeignTag(ft, 100, getScale(i, foreignAppearences[i][j]), foreignMatchTypes[i][j]);
			}
			pjs.separateTags();
			pjs.highlightOwnTags();
		}
	}

	function score2matchType(score){
		type = "";
		if(score == ""){
			type = "indirectMatch";
		} else if(parseInt(score) > 0){
			type = "directMatch";
		}
		return type;
	}

	function getScale(round, appearence){
		var max = Math.max.apply(Math, foreignAppearences[round]);
		var min = Math.min.apply(Math, foreignAppearences[round]);
		var scale = 1;
		if(appearence > min){
			scale = 15 * (appearence - min)/(max - min);
		}
		return 10 + scale;
	}

	function containsIgnoreCase(arr, tag){
		var b = false;
        var u = tag.toUpperCase();
		for(var i = 0; i &lt; arr.length; i++){
			var a = arr[i].toUpperCase();
			b = b || a == u;
		}
		return b; 
	}
        
    </script>

	<a4j:loadScript src="/terminaGame/processing.js" />


	<table>
		<ui:repeat var="_gameround" value="#{gameSession.getGameRounds()}">
			<ui:repeat var="_givenTag" value="#{_gameround.actions}">
				<script type="text/javascript">
    			console.log("repeating over gameround actions " + "#{_gameround.number}" + "#{_givenTag.tag.name}")
    			
    			//newUserTag("#{_gameround.number}", "#{_givenTag.tag.name}", "#{_givenTag.score}");
				var appearence = "#{elearnResults.getAppearence(_gameround, _givenTag)}";
				console.log("#{_givenTag.tag.name}" + " has appearence:" + appearence);
	    		newUserTag("#{_gameround.number}", "#{_givenTag.tag.name}", "#{_givenTag.score}", appearence);					
    		</script>
			</ui:repeat>
			<ui:repeat var="_tag"
				value="#{elearnResults.getTopCorrectAnswers(_gameround)}">
				<script type="text/javascript">
    				newForeignTag("#{_gameround.number}", "#{_tag.term}", "#{_tag.appearence}", "directMatch");
    			</script>
			</ui:repeat>
			<ui:repeat var="_tag"
				value="#{elearnResults.getTopUnknownAnswers(_gameround)}">
				<script type="text/javascript">
    				newForeignTag("#{_gameround.number}", "#{_tag.term}", "#{_tag.appearence}", "indirectMatch");
    			</script>
			</ui:repeat>
			<ui:repeat var="_tag"
				value="#{elearnResults.getTopWrongAnswers(_gameround)}">
				<script type="text/javascript">
    				newForeignTag("#{_gameround.number}", "#{_tag.term}", "#{_tag.appearence}", "WRONG");
    			</script>
			</ui:repeat>
			<!-- <h:outputText value="# {elearnResults.processingResults(_gameround.number)}" escape="false" />-->
			<tr>
				<td>
					<canvas
						id="#{_gameround.number}"
						data-processing-sources="terminaGame/TerminaGraph.pde terminaGame/Vertex.pde terminaGame/RoundedArc.pde">
					</canvas> 
					<script type="text/javascript">
   						newProcessingInstance("#{_gameround.number}");
   	    				newTerm("#{_gameround.resources.get(0).tag.name}");
    	    		</script>
				</td>
			</tr>
		</ui:repeat>
	</table>

</ui:composition>