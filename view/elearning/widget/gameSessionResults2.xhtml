<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
    xmlns:s="http://jboss.com/products/seam/taglib"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:rich="http://richfaces.org/rich"
    xmlns:a4j="http://richfaces.org/a4j">
    
    <script type="text/javascript">
 	processingInstances = new Array();
 	numberOfRounds = "#{gameSession.getGameRounds().size()}";
 	numberOfRounds = parseInt(numberOfRounds);
 	console.log("number of rounds: " +numberOfRounds);
  	userTags =  new Array(numberOfRounds);
	scores = new Array(numberOfRounds);	
	for (var i = 0; i &lt; numberOfRounds; i++){
		console.log("creating terms array");
		userTags[i] = new Array();
		scores[i] = new Array();
	}

 	terms = new Array();
	
	function newUserTag(round, tag,score){
		console.log("new user tag. round: " + round + ", tag: " + tag + ", score: " + score);
		userTags[round - 1].push(tag);
		scores[round -1].push(score);
	}

	function newProcessingInstance(id){
		var waiting = setInterval(function(){
			var pjs = Processing.getInstanceById(id);
			if(typeof pjs != 'undefined'){
				clearInterval(waiting);
				//add Instance
				processingInstances.push(pjs);
				console.log("number of processing instances: " + processingInstances.length);
				if(processingInstances.length == numberOfRounds)
					setUpGraphs();
			}			
		},10)
	}
	
	function newTerm(term){
		console.log("new term: " + term);
		terms.push(term);
	}
	
	function setUpGraphs(){
		console.log("setUpGraphs called");
		for(var i = 0; i &lt; numberOfRounds; i++){
			var pjs = processingInstances[i];
			term = terms[i];
			console.log("term in round " + i + " : " + term  );
			
			pjs.setTerm(term);
			for(var j = 0; j &lt; userTags[i].length; j++){
				score = scores[i,j];
				type = score2matchType(score);
				pjs.newVertex(userTags[i][j], 100, 20, type);
			}
		}
	}

	function score2matchType(score){
		type = "";
		if(parseInt(score) > 0){
			type = "directMatch";
		} else if(score == ""){
			type = "indirectMatch";
		} 
		return type;
	}
    
    function addLoadEvent(func) {
    	var oldonload = window.onload;
    	if (typeof window.onload != 'function') {
    		window.onload = func;
    	} else {
    		window.onload = function() {
    			oldonload();
    			func();
    		};
    	}
    }
        
    </script>
    
    <a4j:loadScript src="/terminaGame/processing.js"/>			
    
    
   	<table>
    <ui:repeat var="_gameround" value="#{gameSession.getGameRounds()}">
 	  	<ui:repeat var="_givenTag" value="#{_gameround.actions}">
    		<script type="text/javascript">
    			console.log("repeating over gameround actions " + "#{_gameround.number}" + "#{_givenTag.tag.name}")
    			newUserTag("#{_gameround.number}", "#{_givenTag.tag.name}", "#{_givenTag.score}");
    		</script>
    	</ui:repeat> 
    	<tr><td>Runde: <h:outputText value="#{_gameround.number}" />
    		<canvas id="#{_gameround.number}" data-processing-sources="terminaGame/TerminaGraph.pde terminaGame/Vertex.pde"> </canvas>
    		<script type="text/javascript">
   				newProcessingInstance("#{_gameround.number}");
   	    		newTerm("#{_gameround.resources.get(0).tag.name}");
    	    </script>
    	</td></tr>
    </ui:repeat>
   	</table>
	
	
</ui:composition>